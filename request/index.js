"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.del = exports.patch = exports.post = exports.get = void 0;
var manager_1 = require("../user/manager");
var baseURL = "http://localhost:3000/api";
function addAuthenticationHeaders(options) {
    if (!options.header) {
        options.header = {};
    }
    options.header['X-User-Id'] = manager_1.default.getUserId();
    options.header['X-User-Access-Token'] = manager_1.default.getAccessToken();
}
function get(url, options) {
    if (options === void 0) { options = {}; }
    options.url = baseURL + url;
    options.method = 'GET';
    addAuthenticationHeaders(options);
    return request(options);
}
exports.get = get;
function post(url, data, options) {
    if (data === void 0) { data = null; }
    if (options === void 0) { options = {}; }
    options.url = baseURL + url;
    options.method = 'POST';
    addAuthenticationHeaders(options);
    options.data = data;
    return request(options);
}
exports.post = post;
function patch(url, data, options) {
    if (data === void 0) { data = null; }
    if (options === void 0) { options = {}; }
    options.url = baseURL + url;
    options.method = 'PUT';
    addAuthenticationHeaders(options);
    options.data = data;
    return request(options);
}
exports.patch = patch;
function del(url, options) {
    if (options === void 0) { options = {}; }
    options.url = baseURL + url;
    options.method = 'DELETE';
    addAuthenticationHeaders(options);
    return request(options);
}
exports.del = del;
function request(options) {
    return new Promise(function (resolve, reject) {
        options.success = function (res) {
            if (res.statusCode >= 200 && res.statusCode < 400 && !res.data.err) {
                resolve(res);
            }
            else {
                if (res.statusCode === 401) {
                    manager_1.default.clearTokens();
                    wx.redirectTo({ url: '/pages/login/index' });
                }
                reject(res);
            }
        };
        options.fail = function (err) {
            reject(err);
        };
        wx.request(options);
    });
}
exports.request = request;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBeUM7QUFHekMsSUFBTSxPQUFPLEdBQUcsMkJBQTJCLENBQUE7QUFFM0MsU0FBUyx3QkFBd0IsQ0FBQyxPQUFZO0lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFBO0tBQ3BCO0lBQ0QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxpQkFBVyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ3JELE9BQU8sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxpQkFBVyxDQUFDLGNBQWMsRUFBRSxDQUFBO0FBQ3RFLENBQUM7QUFFRCxTQUFnQixHQUFHLENBQUMsR0FBVyxFQUFFLE9BQWlCO0lBQWpCLHdCQUFBLEVBQUEsWUFBaUI7SUFDaEQsT0FBTyxDQUFDLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxDQUFBO0lBQzNCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3pCLENBQUM7QUFMRCxrQkFLQztBQUVELFNBQWdCLElBQUksQ0FBQyxHQUFXLEVBQUUsSUFBZ0IsRUFBRSxPQUFpQjtJQUFuQyxxQkFBQSxFQUFBLFdBQWdCO0lBQUUsd0JBQUEsRUFBQSxZQUFpQjtJQUNuRSxPQUFPLENBQUMsR0FBRyxHQUFHLE9BQU8sR0FBRyxHQUFHLENBQUE7SUFDM0IsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7SUFDdkIsd0JBQXdCLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDakMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7SUFDbkIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDekIsQ0FBQztBQU5ELG9CQU1DO0FBRUQsU0FBZ0IsS0FBSyxDQUFDLEdBQVcsRUFBRSxJQUFnQixFQUFFLE9BQWlCO0lBQW5DLHFCQUFBLEVBQUEsV0FBZ0I7SUFBRSx3QkFBQSxFQUFBLFlBQWlCO0lBQ3BFLE9BQU8sQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLEdBQUcsQ0FBQTtJQUMzQixPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQTtJQUN0Qix3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNqQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtJQUNuQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBTkQsc0JBTUM7QUFFRCxTQUFnQixHQUFHLENBQUMsR0FBVyxFQUFFLE9BQWlCO0lBQWpCLHdCQUFBLEVBQUEsWUFBaUI7SUFDaEQsT0FBTyxDQUFDLEdBQUcsR0FBRyxPQUFPLEdBQUcsR0FBRyxDQUFBO0lBQzNCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFBO0lBQ3pCLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2pDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3pCLENBQUM7QUFMRCxrQkFLQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxPQUFZO0lBQ2xDLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUNqQyxPQUFPLENBQUMsT0FBTyxHQUFHLFVBQUMsR0FBUTtZQUN6QixJQUFJLEdBQUcsQ0FBQyxVQUFVLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ2xFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTthQUNiO2lCQUFNO2dCQUNMLElBQUksR0FBRyxDQUFDLFVBQVUsS0FBSyxHQUFHLEVBQUU7b0JBQzFCLGlCQUFXLENBQUMsV0FBVyxFQUFFLENBQUE7b0JBQ3pCLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFBO2lCQUM3QztnQkFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7YUFDWjtRQUNILENBQUMsQ0FBQTtRQUNELE9BQU8sQ0FBQyxJQUFJLEdBQUcsVUFBQyxHQUFRO1lBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNiLENBQUMsQ0FBQTtRQUNELEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDckIsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBbEJELDBCQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVc2VyTWFuYWdlciBmcm9tICcuLi91c2VyL21hbmFnZXInXG5cbi8vIGNvbnN0IGJhc2VVUkwgPSBcImh0dHBzOi8vYmlsbC5rdWFpZ29uZ2xpYW4uY29tL2FwaVwiXG5jb25zdCBiYXNlVVJMID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpXCJcblxuZnVuY3Rpb24gYWRkQXV0aGVudGljYXRpb25IZWFkZXJzKG9wdGlvbnM6IGFueSkge1xuICBpZiAoIW9wdGlvbnMuaGVhZGVyKSB7XG4gICAgb3B0aW9ucy5oZWFkZXIgPSB7fVxuICB9XG4gIG9wdGlvbnMuaGVhZGVyWydYLVVzZXItSWQnXSA9IFVzZXJNYW5hZ2VyLmdldFVzZXJJZCgpXG4gIG9wdGlvbnMuaGVhZGVyWydYLVVzZXItQWNjZXNzLVRva2VuJ10gPSBVc2VyTWFuYWdlci5nZXRBY2Nlc3NUb2tlbigpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQodXJsOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgb3B0aW9ucy51cmwgPSBiYXNlVVJMICsgdXJsXG4gIG9wdGlvbnMubWV0aG9kID0gJ0dFVCdcbiAgYWRkQXV0aGVudGljYXRpb25IZWFkZXJzKG9wdGlvbnMpXG4gIHJldHVybiByZXF1ZXN0KG9wdGlvbnMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3N0KHVybDogc3RyaW5nLCBkYXRhOiBhbnkgPSBudWxsLCBvcHRpb25zOiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiB7XG4gIG9wdGlvbnMudXJsID0gYmFzZVVSTCArIHVybFxuICBvcHRpb25zLm1ldGhvZCA9ICdQT1NUJ1xuICBhZGRBdXRoZW50aWNhdGlvbkhlYWRlcnMob3B0aW9ucylcbiAgb3B0aW9ucy5kYXRhID0gZGF0YVxuICByZXR1cm4gcmVxdWVzdChvcHRpb25zKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2godXJsOiBzdHJpbmcsIGRhdGE6IGFueSA9IG51bGwsIG9wdGlvbnM6IGFueSA9IHt9KTogUHJvbWlzZTxhbnk+IHtcbiAgb3B0aW9ucy51cmwgPSBiYXNlVVJMICsgdXJsXG4gIG9wdGlvbnMubWV0aG9kID0gJ1BVVCdcbiAgYWRkQXV0aGVudGljYXRpb25IZWFkZXJzKG9wdGlvbnMpXG4gIG9wdGlvbnMuZGF0YSA9IGRhdGFcbiAgcmV0dXJuIHJlcXVlc3Qob3B0aW9ucylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbCh1cmw6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBQcm9taXNlPGFueT4ge1xuICBvcHRpb25zLnVybCA9IGJhc2VVUkwgKyB1cmxcbiAgb3B0aW9ucy5tZXRob2QgPSAnREVMRVRFJ1xuICBhZGRBdXRoZW50aWNhdGlvbkhlYWRlcnMob3B0aW9ucylcbiAgcmV0dXJuIHJlcXVlc3Qob3B0aW9ucylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3Qob3B0aW9uczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSAocmVzOiBhbnkpID0+IHtcbiAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCA0MDAgJiYgIXJlcy5kYXRhLmVycikge1xuICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA9PT0gNDAxKSB7XG4gICAgICAgICAgVXNlck1hbmFnZXIuY2xlYXJUb2tlbnMoKVxuICAgICAgICAgIHd4LnJlZGlyZWN0VG8oeyB1cmw6ICcvcGFnZXMvbG9naW4vaW5kZXgnIH0pXG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KHJlcylcbiAgICAgIH1cbiAgICB9XG4gICAgb3B0aW9ucy5mYWlsID0gKGVycjogYW55KSA9PiB7XG4gICAgICByZWplY3QoZXJyKVxuICAgIH1cbiAgICB3eC5yZXF1ZXN0KG9wdGlvbnMpXG4gIH0pXG59XG4iXX0=