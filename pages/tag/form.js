"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../request/index");
var deepClone_1 = require("../../utils/deepClone");
Page({
    data: {
        ready: false,
        tagType: '',
        tag: null,
        formData: {
            name: '',
        },
        tagValues: [{ id: 0, value: '' }],
    },
    onLoad: function (options) {
        var _this = this;
        if (options.id) {
            wx.showLoading({ title: '加载中' });
            index_1.get("/tags/" + options.id).then(function (res) {
                wx.hideLoading();
                var tagValues = JSON.parse(res.data.value).map(function (e, i) { return { id: i, value: e }; });
                var formData = { name: res.data.name };
                _this.setData({ tag: res.data, tagValues: tagValues, formData: formData, ready: true });
            }).catch(function () {
                wx.hideLoading();
            });
        }
        else if (options.tagType === 'bill') {
            wx.showLoading({ title: '加载中' });
            index_1.get("/tags?tag_type=" + options.tagType).then(function (res) {
                wx.hideLoading();
                var tag, tagValues;
                if (res.data.length > 0) {
                    tag = res.data[0];
                    tagValues = JSON.parse(tag.value).map(function (e, i) { return { id: i, value: e }; });
                }
                else {
                    tagValues = _this.data.tagValues;
                }
                _this.setData({ tag: tag, tagValues: tagValues, tagType: options.tagType, ready: true });
            }).catch(function () {
                wx.hideLoading();
            });
        }
        else {
            this.setData({ ready: true });
        }
    },
    addTagValue: function () {
        var tagValues = this.data.tagValues;
        tagValues.push({ id: tagValues.length, value: '' });
        this.setData({ tagValues: tagValues });
    },
    deleteTagValue: function (e) {
        var _this = this;
        var id = e.currentTarget.dataset.id;
        var tagValues = this.data.tagValues;
        if (tagValues[id].value) {
            wx.showModal({
                content: '是否确认删除该标签?',
                success: function (res) {
                    if (res.confirm) {
                        tagValues.splice(id, 1);
                        _this.setData({ tagValues: tagValues });
                    }
                }
            });
        }
        else {
            tagValues.splice(id, 1);
            this.setData({ tagValues: tagValues });
        }
    },
    onTagValueChange: function (e) {
        var id = e.currentTarget.dataset.id;
        var tagValues = this.data.tagValues;
        tagValues[id].value = e.detail.value;
        this.setData({ tagValues: tagValues });
    },
    formInputChange: function (e) {
        var _a;
        var field = e.currentTarget.dataset.field;
        this.setData((_a = {},
            _a["formData." + field] = e.detail.value,
            _a));
    },
    showError: function (error) {
        this.setData({
            error: error
        });
    },
    submit: function () {
        var formData = this.data.formData;
        if (this.data.tagType !== 'bill' && !formData.name) {
            this.showError('请输入标签名称');
            return;
        }
        var tagValues = this.data.tagValues;
        if (tagValues.length === 0) {
            this.showError('至少需要设置一个标签值');
            return;
        }
        for (var _i = 0, tagValues_1 = tagValues; _i < tagValues_1.length; _i++) {
            var v = tagValues_1[_i];
            if (!v.value) {
                this.showError('请输入标签值');
                return;
            }
        }
        var data = deepClone_1.default(formData);
        data.tag_type = this.data.tagType || 'cargo_category';
        data.value = JSON.stringify(tagValues.map(function (e) { return e.value; }));
        wx.showLoading({ title: '提交中' });
        var promise;
        if (this.data.tag) {
            promise = index_1.patch("/tags/" + this.data.tag.id, data);
        }
        else {
            promise = index_1.post('/tags', data);
        }
        promise.then(function () {
            wx.hideLoading();
            wx.navigateBack();
        }).catch(function () {
            wx.hideLoading();
            wx.showToast({
                title: '请求失败，请重新尝试',
                icon: 'none'
            });
        });
    },
    deleteTag: function () {
        var _this = this;
        wx.showModal({
            content: '是否确认删除该标签?',
            success: function (res) {
                if (res.confirm) {
                    wx.showLoading({ title: '删除中' });
                    index_1.del("/tags/" + _this.data.tag.id).then(function () {
                        wx.hideLoading();
                        wx.navigateBack();
                    }).catch(function () {
                        wx.hideLoading();
                        wx.showToast({
                            title: '请求失败，请重新尝试',
                            icon: 'none'
                        });
                    });
                }
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,