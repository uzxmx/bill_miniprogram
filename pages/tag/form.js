"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../request/index");
var deepClone_1 = require("../../utils/deepClone");
Page({
    data: {
        tag: null,
        formData: {
            name: '',
        },
        tagValues: [{ id: 0, value: '' }],
    },
    onLoad: function (options) {
        var _this = this;
        if (options.id) {
            wx.showLoading({ title: '加载中' });
            index_1.get("/tags/" + options.id).then(function (res) {
                wx.hideLoading();
                var tagValues = JSON.parse(res.data.value).map(function (e, i) { return { id: i, value: e }; });
                var formData = { name: res.data.name };
                _this.setData({ tag: res.data, tagValues: tagValues, formData: formData });
            }).catch(function () {
                wx.hideLoading();
            });
        }
    },
    addTagValue: function () {
        var tagValues = this.data.tagValues;
        tagValues.push({ id: tagValues.length, value: '' });
        this.setData({ tagValues: tagValues });
    },
    deleteTagValue: function (e) {
        var _this = this;
        var id = e.currentTarget.dataset.id;
        var tagValues = this.data.tagValues;
        if (tagValues[id].value) {
            wx.showModal({
                content: '是否确认删除该标签?',
                success: function (res) {
                    if (res.confirm) {
                        tagValues.splice(id, 1);
                        _this.setData({ tagValues: tagValues });
                    }
                }
            });
        }
        else {
            tagValues.splice(id, 1);
            this.setData({ tagValues: tagValues });
        }
    },
    onTagValueChange: function (e) {
        var id = e.currentTarget.dataset.id;
        var tagValues = this.data.tagValues;
        tagValues[id].value = e.detail.value;
        this.setData({ tagValues: tagValues });
    },
    formInputChange: function (e) {
        var _a;
        var field = e.currentTarget.dataset.field;
        this.setData((_a = {},
            _a["formData." + field] = e.detail.value,
            _a));
    },
    showError: function (error) {
        this.setData({
            error: error
        });
    },
    submit: function () {
        var formData = this.data.formData;
        if (!formData.name) {
            this.showError('请输入标签名称');
            return;
        }
        var tagValues = this.data.tagValues;
        if (tagValues.length === 0) {
            this.showError('至少需要设置一个标签值');
            return;
        }
        for (var _i = 0, tagValues_1 = tagValues; _i < tagValues_1.length; _i++) {
            var v = tagValues_1[_i];
            if (!v.value) {
                this.showError('请输入标签值');
                return;
            }
        }
        var data = deepClone_1.default(formData);
        data.tag_type = 'cargo_category';
        data.value = JSON.stringify(tagValues.map(function (e) { return e.value; }));
        wx.showLoading({ title: '提交中' });
        var promise;
        if (this.data.tag) {
            promise = index_1.patch("/tags/" + this.data.tag.id, data);
        }
        else {
            promise = index_1.post('/tags', data);
        }
        promise.then(function () {
            wx.hideLoading();
            wx.navigateBack();
        }).catch(function () {
            wx.hideLoading();
            wx.showToast({
                title: '请求失败，请重新尝试',
                icon: 'none'
            });
        });
    },
    deleteTag: function () {
        var _this = this;
        wx.showModal({
            content: '是否确认删除该标签?',
            success: function (res) {
                if (res.confirm) {
                    wx.showLoading({ title: '删除中' });
                    index_1.del("/tags/" + _this.data.tag.id).then(function () {
                        wx.hideLoading();
                        wx.navigateBack();
                    }).catch(function () {
                        wx.hideLoading();
                        wx.showToast({
                            title: '请求失败，请重新尝试',
                            icon: 'none'
                        });
                    });
                }
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBMkQ7QUFDM0QsbURBQTZDO0FBRTdDLElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxJQUFJO1FBQ1QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLEVBQUU7U0FDVDtRQUNELFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDbEM7SUFFRCxNQUFNLEVBQU4sVUFBTyxPQUFPO1FBQWQsaUJBWUM7UUFYQyxJQUFJLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDZCxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDaEMsV0FBRyxDQUFDLFdBQVMsT0FBTyxDQUFDLEVBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEdBQUc7Z0JBQ2pDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtnQkFDaEIsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQU0sRUFBRSxDQUFNLElBQU8sT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBQ3BHLElBQU0sUUFBUSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7Z0JBQ3hDLEtBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLFdBQUEsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDLENBQUE7WUFDdEQsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFD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QUFFLFVBQUEsR0FBRztnQkFDVixJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7b0JBQ2YsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO29CQUVoQyxXQUFHLENBQUMsV0FBUyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQ3BDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTt3QkFDaEIsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO29CQUNuQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7d0JBQ1AsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO3dCQUNoQixFQUFFLENBQUMsU0FBUyxDQUFDOzRCQUNYLEtBQUssRUFBRSxZQUFZOzRCQUNuQixJQUFJLEVBQUUsTUFBTTt5QkFDYixDQUFDLENBQUE7b0JBQ0osQ0FBQyxDQUFDLENBQUE7aUJBQ0g7WUFDSCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldCwgcG9zdCwgcGF0Y2gsIGRlbCB9IGZyb20gJy4uLy4uL3JlcXVlc3QvaW5kZXgnXG5pbXBvcnQgZGVlcENsb25lIGZyb20gJy4uLy4uL3V0aWxzL2RlZXBDbG9uZSdcblxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICB0YWc6IG51bGwsXG4gICAgZm9ybURhdGE6IHtcbiAgICAgIG5hbWU6ICcnLFxuICAgIH0sXG4gICAgdGFnVmFsdWVzOiBbeyBpZDogMCwgdmFsdWU6ICcnIH1dLFxuICB9LFxuXG4gIG9uTG9hZChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgIHd4LnNob3dMb2FkaW5nKHsgdGl0bGU6ICfliqDovb3kuK0nIH0pXG4gICAgICBnZXQoYC90YWdzLyR7b3B0aW9ucy5pZH1gKS50aGVuKHJlcyA9PiB7XG4gICAgICAgIHd4LmhpZGVMb2FkaW5nKClcbiAgICAgICAgY29uc3QgdGFnVmFsdWVzID0gSlNPTi5wYXJzZShyZXMuZGF0YS52YWx1ZSkubWFwKChlOiBhbnksIGk6IGFueSkgPT4geyByZXR1cm4geyBpZDogaSwgdmFsdWU6IGUgfSB9KVxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IHsgbmFtZTogcmVzLmRhdGEubmFtZSB9XG4gICAgICAgIHRoaXMuc2V0RGF0YSh7IHRhZzogcmVzLmRhdGEsIHRhZ1ZhbHVlcywgZm9ybURhdGEgfSlcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgd3guaGlkZUxvYWRpbmcoKVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG5cbiAgYWRkVGFnVmFsdWUoKSB7XG4gICAgY29uc3QgdGFnVmFsdWVzID0gdGhpcy5kYXRhLnRhZ1ZhbHVlc1xuICAgIHRhZ1ZhbHVlcy5wdXNoKHsgaWQ6IHRhZ1ZhbHVlcy5sZW5ndGgsIHZhbHVlOiAnJyB9KVxuICAgIHRoaXMuc2V0RGF0YSh7IHRhZ1ZhbHVlcyB9KVxuICB9LFxuXG4gIGRlbGV0ZVRhZ1ZhbHVlKGU6IGFueSkge1xuICAgIGNvbnN0IHsgaWQgfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0XG4gICAgY29uc3QgdGFnVmFsdWVzID0gdGhpcy5kYXRhLnRhZ1ZhbHVlc1xuXG4gICAgaWYgKHRhZ1ZhbHVlc1tpZF0udmFsdWUpIHtcbiAgICAgIHd4LnNob3dNb2RhbCh7XG4gICAgICAgIGNvbnRlbnQ6ICfmmK/lkKbnoa7orqTliKDpmaTor6XmoIfnrb4/JyxcbiAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICBpZiAocmVzLmNvbmZpcm0pIHtcbiAgICAgICAgICAgIHRhZ1ZhbHVlcy5zcGxpY2UoaWQsIDEpXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoeyB0YWdWYWx1ZXMgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZ1ZhbHVlcy5zcGxpY2UoaWQsIDEpXG4gICAgICB0aGlzLnNldERhdGEoeyB0YWdWYWx1ZXMgfSlcbiAgICB9XG4gIH0sXG5cbiAgb25UYWdWYWx1ZUNoYW5nZShlOiBhbnkpIHtcbiAgICBjb25zdCB7IGlkIH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldFxuICAgIGNvbnN0IHRhZ1ZhbHVlcyA9IHRoaXMuZGF0YS50YWdWYWx1ZXNcbiAgICB0YWdWYWx1ZXNbaWRdLnZhbHVlID0gZS5kZXRhaWwudmFsdWVcbiAgICB0aGlzLnNldERhdGEoeyB0YWdWYWx1ZXMgfSk7XG4gIH0sXG5cbiAgZm9ybUlucHV0Q2hhbmdlKGU6IGFueSkge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIFtgZm9ybURhdGEuJHtmaWVsZH1gXTogZS5kZXRhaWwudmFsdWVcbiAgICB9KVxuICB9LFxuXG4gIHNob3dFcnJvcihlcnJvcjogc3RyaW5nKSB7XG4gICAgdGhpcy5zZXREYXRhKHtcbiAgICAgIGVycm9yXG4gICAgfSlcbiAgfSxcblxuICBzdWJtaXQoKSB7XG4gICAgY29uc3QgZm9ybURhdGEgPSB0aGlzLmRhdGEuZm9ybURhdGFcblxuICAgIGlmICghZm9ybURhdGEubmFtZSkge1xuICAgICAgdGhpcy5zaG93RXJyb3IoJ+ivt+i+k+WFpeagh+etvuWQjeensCcpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCB0YWdWYWx1ZXMgPSB0aGlzLmRhdGEudGFnVmFsdWVzXG4gICAgaWYgKHRhZ1ZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuc2hvd0Vycm9yKCfoh7PlsJHpnIDopoHorr7nva7kuIDkuKrmoIfnrb7lgLwnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAoY29uc3QgdiBvZiB0YWdWYWx1ZXMpIHtcbiAgICAgIGlmICghdi52YWx1ZSkge1xuICAgICAgICB0aGlzLnNob3dFcnJvcign6K+36L6T5YWl5qCH562+5YC8JylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGRhdGEgPSBkZWVwQ2xvbmUoZm9ybURhdGEpXG4gICAgZGF0YS50YWdfdHlwZSA9ICdjYXJnb19jYXRlZ29yeSdcbiAgICBkYXRhLnZhbHVlID0gSlNPTi5zdHJpbmdpZnkodGFnVmFsdWVzLm1hcChlID0+IGUudmFsdWUpKVxuXG4gICAgd3guc2hvd0xvYWRpbmcoeyB0aXRsZTogJ+aPkOS6pOS4rScgfSlcbiAgICBsZXQgcHJvbWlzZVxuICAgIGlmICh0aGlzLmRhdGEudGFnKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBwcm9taXNlID0gcGF0Y2goYC90YWdzLyR7dGhpcy5kYXRhLnRhZy5pZH1gLCBkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlID0gcG9zdCgnL3RhZ3MnLCBkYXRhKVxuICAgIH1cbiAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgd3guaGlkZUxvYWRpbmcoKVxuICAgICAgd3gubmF2aWdhdGVCYWNrKClcbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICB3eC5oaWRlTG9hZGluZygpXG4gICAgICB3eC5zaG93VG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ+ivt+axguWksei0pe+8jOivt+mHjeaWsOWwneivlScsXG4gICAgICAgIGljb246ICdub25lJ1xuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGRlbGV0ZVRhZygpIHtcbiAgICB3eC5zaG93TW9kYWwoe1xuICAgICAgY29udGVudDogJ+aYr+WQpuehruiupOWIoOmZpOivpeagh+etvj8nLFxuICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5jb25maXJtKSB7XG4gICAgICAgICAgd3guc2hvd0xvYWRpbmcoeyB0aXRsZTogJ+WIoOmZpOS4rScgfSlcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgZGVsKGAvdGFncy8ke3RoaXMuZGF0YS50YWcuaWR9YCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB3eC5oaWRlTG9hZGluZygpXG4gICAgICAgICAgICB3eC5uYXZpZ2F0ZUJhY2soKVxuICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIHd4LmhpZGVMb2FkaW5nKClcbiAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgICAgICAgIHRpdGxlOiAn6K+35rGC5aSx6LSl77yM6K+36YeN5paw5bCd6K+VJyxcbiAgICAgICAgICAgICAgaWNvbjogJ25vbmUnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG59KVxuIl19