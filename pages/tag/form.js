"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../request/index");
var deepClone_1 = require("../../utils/deepClone");
Page({
    data: {
        tag: null,
        formData: {
            name: '',
        },
        tagValues: [{ id: 0, value: '' }],
    },
    onLoad: function (options) {
        var _this = this;
        if (options.id) {
            index_1.get("/tags/" + options.id).then(function (res) {
                _this.setData({ tag: res.data });
            });
        }
    },
    addTagValue: function () {
        var tagValues = this.data.tagValues;
        tagValues.push({ id: tagValues.length, value: '' });
        this.setData({ tagValues: tagValues });
    },
    deleteTagValue: function (e) {
        var id = e.currentTarget.dataset.id;
        var tagValues = this.data.tagValues;
        tagValues.splice(id, 1);
        this.setData({ tagValues: tagValues });
    },
    onTagValueChange: function (e) {
        var id = e.currentTarget.dataset.id;
        var tagValues = this.data.tagValues;
        tagValues[id].value = e.detail.value;
        this.setData({ tagValues: tagValues });
    },
    formInputChange: function (e) {
        var _a;
        var field = e.currentTarget.dataset.field;
        this.setData((_a = {},
            _a["formData." + field] = e.detail.value,
            _a));
    },
    showError: function (error) {
        this.setData({
            error: error
        });
    },
    submit: function () {
        var formData = this.data.formData;
        if (!formData.name) {
            this.showError('请输入标签名称');
            return;
        }
        var tagValues = this.data.tagValues;
        if (tagValues.length === 0) {
            this.showError('至少需要设置一个标签值');
            return;
        }
        for (var _i = 0, tagValues_1 = tagValues; _i < tagValues_1.length; _i++) {
            var v = tagValues_1[_i];
            if (!v.value) {
                this.showError('请输入标签值');
                return;
            }
        }
        var data = deepClone_1.default(formData);
        data.tag_type = 'cargo_category';
        data.value = JSON.stringify(tagValues.map(function (e) { return e.value; }));
        wx.showLoading({ title: '提交中' });
        var promise;
        if (this.data.tag) {
            promise = index_1.patch("/tags/" + this.data.tag.id, data);
        }
        else {
            promise = index_1.post('/tags', data);
        }
        promise.then(function () {
            wx.hideLoading();
            wx.navigateBack();
        }).catch(function () {
            wx.hideLoading();
            wx.showToast({
                title: '请求失败，请重新尝试',
                icon: 'none'
            });
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0Q7QUFDdEQsbURBQTZDO0FBRTdDLElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLEdBQUcsRUFBRSxJQUFJO1FBQ1QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLEVBQUU7U0FDVDtRQUNELFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDbEM7SUFFRCxNQUFNLFlBQUMsT0FBTztRQUFkLGlCQU1DO1FBTEMsSUFBSSxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ2QsV0FBRyxDQUFDLFdBQVMsT0FBTyxDQUFDLEVBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEdBQUc7Z0JBQ2pDLEtBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7WUFDakMsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDckMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTLFdBQUEsRUFBRSxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUVELGNBQWMsRUFBZCxVQUFlLENBQU07UUFDWCxJQUFBLEVBQUUsR0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBNUIsQ0FBNEI7UUFDdEMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDckMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFF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LE1BQU07YUFDYixDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXQsIHBvc3QsIHBhdGNoIH0gZnJvbSAnLi4vLi4vcmVxdWVzdC9pbmRleCdcbmltcG9ydCBkZWVwQ2xvbmUgZnJvbSAnLi4vLi4vdXRpbHMvZGVlcENsb25lJ1xuXG5QYWdlKHtcbiAgZGF0YToge1xuICAgIHRhZzogbnVsbCxcbiAgICBmb3JtRGF0YToge1xuICAgICAgbmFtZTogJycsXG4gICAgfSxcbiAgICB0YWdWYWx1ZXM6IFt7IGlkOiAwLCB2YWx1ZTogJycgfV0sXG4gIH0sXG5cbiAgb25Mb2FkKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgZ2V0KGAvdGFncy8ke29wdGlvbnMuaWR9YCkudGhlbihyZXMgPT4ge1xuICAgICAgICB0aGlzLnNldERhdGEoeyB0YWc6IHJlcy5kYXRhIH0pXG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICBhZGRUYWdWYWx1ZSgpIHtcbiAgICBjb25zdCB0YWdWYWx1ZXMgPSB0aGlzLmRhdGEudGFnVmFsdWVzXG4gICAgdGFnVmFsdWVzLnB1c2goeyBpZDogdGFnVmFsdWVzLmxlbmd0aCwgdmFsdWU6ICcnIH0pXG4gICAgdGhpcy5zZXREYXRhKHsgdGFnVmFsdWVzIH0pXG4gIH0sXG5cbiAgZGVsZXRlVGFnVmFsdWUoZTogYW55KSB7XG4gICAgY29uc3QgeyBpZCB9ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXRcbiAgICBjb25zdCB0YWdWYWx1ZXMgPSB0aGlzLmRhdGEudGFnVmFsdWVzXG4gICAgdGFnVmFsdWVzLnNwbGljZShpZCwgMSlcbiAgICB0aGlzLnNldERhdGEoeyB0YWdWYWx1ZXMgfSlcbiAgfSxcblxuICBvblRhZ1ZhbHVlQ2hhbmdlKGU6IGFueSkge1xuICAgIGNvbnN0IHsgaWQgfSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0XG4gICAgY29uc3QgdGFnVmFsdWVzID0gdGhpcy5kYXRhLnRhZ1ZhbHVlc1xuICAgIHRhZ1ZhbHVlc1tpZF0udmFsdWUgPSBlLmRldGFpbC52YWx1ZVxuICAgIHRoaXMuc2V0RGF0YSh7IHRhZ1ZhbHVlcyB9KTtcbiAgfSxcblxuICBmb3JtSW5wdXRDaGFuZ2UoZTogYW55KSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXRcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgW2Bmb3JtRGF0YS4ke2ZpZWxkfWBdOiBlLmRldGFpbC52YWx1ZVxuICAgIH0pXG4gIH0sXG5cbiAgc2hvd0Vycm9yKGVycm9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgZXJyb3JcbiAgICB9KVxuICB9LFxuXG4gIHN1Ym1pdCgpIHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IHRoaXMuZGF0YS5mb3JtRGF0YVxuXG4gICAgaWYgKCFmb3JtRGF0YS5uYW1lKSB7XG4gICAgICB0aGlzLnNob3dFcnJvcign6K+36L6T5YWl5qCH562+5ZCN56ewJylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHRhZ1ZhbHVlcyA9IHRoaXMuZGF0YS50YWdWYWx1ZXNcbiAgICBpZiAodGFnVmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5zaG93RXJyb3IoJ+iHs+WwkemcgOimgeiuvue9ruS4gOS4quagh+etvuWAvCcpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yIChjb25zdCB2IG9mIHRhZ1ZhbHVlcykge1xuICAgICAgaWYgKCF2LnZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2hvd0Vycm9yKCfor7fovpPlhaXmoIfnrb7lgLwnKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZGF0YSA9IGRlZXBDbG9uZShmb3JtRGF0YSlcbiAgICBkYXRhLnRhZ190eXBlID0gJ2NhcmdvX2NhdGVnb3J5J1xuICAgIGRhdGEudmFsdWUgPSBKU09OLnN0cmluZ2lmeSh0YWdWYWx1ZXMubWFwKGUgPT4gZS52YWx1ZSkpXG5cbiAgICB3eC5zaG93TG9hZGluZyh7IHRpdGxlOiAn5o+Q5Lqk5LitJyB9KVxuICAgIGxldCBwcm9taXNlXG4gICAgaWYgKHRoaXMuZGF0YS50YWcpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHByb21pc2UgPSBwYXRjaChgL3RhZ3MvJHt0aGlzLmRhdGEudGFnLmlkfWAsIGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UgPSBwb3N0KCcvdGFncycsIGRhdGEpXG4gICAgfVxuICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICB3eC5oaWRlTG9hZGluZygpXG4gICAgICB3eC5uYXZpZ2F0ZUJhY2soKVxuICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgIHd4LmhpZGVMb2FkaW5nKClcbiAgICAgIHd4LnNob3dUb2FzdCh7XG4gICAgICAgIHRpdGxlOiAn6K+35rGC5aSx6LSl77yM6K+36YeN5paw5bCd6K+VJyxcbiAgICAgICAgaWNvbjogJ25vbmUnXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn0pXG4iXX0=